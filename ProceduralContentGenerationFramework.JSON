{
    "ProceduralContentGenerationFramework": {
        "Overview": "The Procedural Content Generation Framework (PCG) is a toolset for creating procedural content in Unreal Engine. It allows artists and designers to build tools and content ranging from asset utilities to entire worlds. PCG integrates seamlessly into existing workflows, enhancing both procedural and traditional methods.",
        "Sections": [
            {
                "ProceduralContentGenerationOverview": {
                    "Title": "Procedural Content Generation Overview",
                    "Description": "Introduction to the Procedural Content Generation Framework and its applications in projects."
                }
            },
            {
                "PCGDevelopmentGuides": {
                    "Title": "PCG Development Guides",
                    "Description": "Reference and best practice guides for working with the Procedural Content Generation Framework."
                }
            },
            {
                "PCGBiome": {
                    "Title": "PCG Biome",
                    "Description": "Learn how to use the PCG framework with the PCG Biome Core and Sample Plugins."
                }
            }
        ],
        "Tags": [
            "landscape",
            "building virtual worlds",
            "procedural generation"
        ],
        "Community": {
            "DeveloperForums": "Ask questions and help your peers on Developer Forums.",
            "LearningLibrary": "Write your own tutorials or read those from others in the Learning Library."
        }
    }
}
{
    "ProceduralContentGenerationOverview": {
        "Description": "The Procedural Content Generation Framework (PCG) is a toolset for creating procedural content and tools in Unreal Engine. It allows technical artists, designers, and programmers to build fast, iterative tools and content of any complexity, from asset utilities to entire worlds.",
        "ImportantConceptsAndTerms": {
            "Points": "Locations in 3D space generated by the PCG graph, used to spawn meshes. Points contain information about transforms, bounds, color, density, steepness, and seed, and can have user-defined attributes.",
            "PointDensity": "Value used by various graph nodes, represented as a gradient on each point (0 is black, 1 is white) to indicate the probability of the point existing at that position."
        },
        "RequiredSetup": {
            "Plugins": [
                "Enable the Procedural Content Generation Framework plugin in your project.",
                "Enable the Procedural Content Generation Framework Geometry Script Interop plugin for sampling points on Static Meshes."
            ]
        },
        "ProceduralNodeGraph": {
            "Description": "Central piece of the PCG Framework, using a format similar to the Material Editor. Spatial data flows into the graph from a PCG Component, generating points that are filtered and modified through nodes, with real-time updates.",
            "CreatingPCGGraphAsset": [
                "Right click in the Content Drawer or Content Browser.",
                "Navigate to Create Advanced Asset > PCG and select PCG Graph.",
                "Name the new Asset and press Enter."
            ],
            "EditingPCGGraph": {
                "EditorLayout": {
                    "Toolbar": "Toolbar",
                    "NodePalette": "Node Palette",
                    "Viewport": "Viewport",
                    "DetailsPanel": "Details panel",
                    "DebugTree": "Debug Tree",
                    "AttributesList": "Attributes list"
                },
                "NodeOperations": "Add nodes by dragging them from the Node Palette or using the context menu. Changes update in real-time when the graph is assigned to a PCG Component."
            },
            "PCGNodes": {
                "Categories": [
                    {
                        "Blueprint": "Contains nodes for executing user Blueprints derived from PCGBlueprintElement."
                    },
                    {
                        "ControlFlow": "Nodes for controlling the flow of logic."
                    },
                    {
                        "Debug": "Nodes for debugging."
                    },
                    {
                        "Density": "Nodes affecting point density."
                    },
                    {
                        "Filter": "Nodes for filtering data based on criteria or per-point."
                    },
                    {
                        "Generic": "Nodes affecting non-spatial data."
                    },
                    {
                        "HierarchicalGeneration": "Nodes for controlling Hierarchical Generation mode."
                    },
                    {
                        "InputOutput": "Nodes for loading Alembic and other external data."
                    },
                    {
                        "IO": "Nodes controlling interaction with external data."
                    },
                    {
                        "Metadata": "Nodes interacting with Attributes on points or Attribute Sets."
                    },
                    {
                        "Param": "Nodes retrieving parameters from Actors or Blueprint variables."
                    },
                    {
                        "PointOps": "Nodes affecting points and their properties."
                    },
                    {
                        "Sampler": "Nodes generating points from spatial data sources."
                    },
                    {
                        "Spatial": "Nodes creating spatial relationships or retrieving spatial data."
                    },
                    {
                        "Spawner": "Nodes creating new data or placing Actors at point locations."
                    },
                    {
                        "Subgraph": "Nodes for using subgraphs."
                    }
                ],
                "CommentsAndRerouteNodes": "Add comments and reroute nodes to improve graph readability."
            }
        },
        "AttributesAndMetadata": {
            "Description": "Attributes are variables storing data defined by name and type. Two types exist: Static Attributes (always present, start with $) and Dynamic Attributes (created at runtime, part of graph metadata).",
            "AttributeSelector": {
                "Description": "Provides interoperability between static and dynamic attributes.",
                "NamingRules": [
                    "Static attributes start with $.",
                    "Dynamic attributes do not start with $.",
                    "@Last represents the last manipulated dynamic attribute."
                ],
                "Examples": [
                    "Math node for mathematical operations on attributes.",
                    "$Position.ZYX provides the inverse of $Position components."
                ]
            },
            "ComponentTypes": [
                {
                    "Vectors": [
                        "X, Y, Z, W, x, y, z, w - Double (can't mix with RGBA).",
                        "R, G, B, A, r, g, b, a - Double (can't mix with XYZW).",
                        "Length, Size - Double, returns vector length."
                    ]
                },
                {
                    "Transforms": [
                        "Location, Position - Vector3.",
                        "Scale, Scale3D - Vector3.",
                        "Rotation - Quaternion."
                    ]
                },
                {
                    "Rotators": [
                        "Pitch, Yaw, Roll - Double.",
                        "Forward, Right, Up - Vector3."
                    ]
                },
                {
                    "Quaternions": [
                        "Support Vector extractor - Vector.",
                        "Support Rotator extractor - Rotator."
                    ]
                }
            ]
        },
        "C++SettingsOverrides": {
            "Description": "Some settings can be overridden in C++ property metadata. For Blueprint nodes, visible and instance editable variables are overridable.",
            "OverrideTypes": [
                "Global override: Accepts attributes matching setting name.",
                "Single override: Accepts attributes matching setting name, or any name if only one attribute exists."
            ],
            "Tooltips": "Use tooltips on override pins to know exact names and types."
        },
        "GraphParameters": {
            "Description": "User-created overridable values for customizable graphs. Similar to parameters in the Material editor.",
            "CreatingParameter": [
                "Open PCG Graph Settings.",
                "Click the + button next to Parameters.",
                "Rename and select type for new parameter."
            ],
            "ChangingParameterValue": [
                "In Graph Parameters or Details panel of a PCG asset.",
                "In Content Browser or Details panel of a PCG asset for a PCG Graph Instance."
            ]
        },
        "GraphInstances": {
            "Description": "PCG Graph Instances work similar to Material Instances, using Graph Parameters for reusability. They can also be used as PCG Subgraphs.",
            "CreatingGraphInstance": [
                "Select a PCG asset in your level.",
                "Select the PCG component in the Details panel.",
                "Click Save Instance button.",
                "Name the new graph instance and press Enter."
            ],
            "UsingSubgraphInstance": "Parameters can be overridden using override pins on the subgraph node."
        },
        "PCGComponent": {
            "Description": "The Procedural Node Graph samples your Level through the PCG Component, managing procedural content generation in the Editor and at runtime.",
            "ConnectingPCGGraph": [
                "Select PCG Volume or Blueprint Class in Editor viewport or Outliner.",
                "Click the PCG Component in the Details panel.",
                "Select the PCG Node Graph from the Graph dropdown.",
                "Click Generate button."
            ]
        },
        "DebuggingInPCG": {
            "Description": "Essential part of the PCG workflow.",
            "DebugOptions": [
                "Debug Rendering",
                "Enable/Disable node",
                "Inspect node"
            ],
            "TogglingOptions": [
                "Toggle Debug Rendering by selecting Debug checkbox or pressing D key.",
                "Toggle node on/off by selecting Enabled checkbox or pressing E key.",
                "Inspect node to display points in Attributes list (right-click node and select Inspect or press A key)."
            ]
        },
        "CreatingSimpleForestVolume": {
            "Description": "Example of creating a forest biome generator using the PCG Framework.",
            "MaterialsAndMeshes": "Uses Megascans Trees: European Hornbeam collection from the Marketplace.",
            "Steps": [
                {
                    "CreateLevel": [
                        "Create a new Project in Unreal Engine.",
                        "Create a new Level using Basic level template.",
                        "Delete Floor Static Mesh, add Landscape using Landscape mode.",
                        "Add variation to Landscape using Sculpt tools."
                    ]
                },
                {
                    "CreatePCGVolume": [
                        "Enable Place Actors window.",
                        "Search for PCG Volume and add to level.",
                        "Scale PCG Volume to X=8.0, Y=8.0, Z=8.0."
                    ]
                },
                {
                    "CreatePCGGraphAsset": [
                        "Right click in Content Drawer or Content Browser.",
                        "Navigate to Create Advanced Asset > PCG, select PCG Graph.",
                        "Name the new asset PCG_ForestGen and press Enter.",
                        "Open PCG_ForestGen to edit."
                    ]
                },
                {
                    "ConnectPCGComponent": [
                        "Select PCG Volume in Editor viewport or Outliner.",
                        "Click the PCG Component in the Details panel.",
                        "Select PCG_ForestGen from the Graph dropdown.",
                        "Click Generate button."
                    ]
                },
                {
                    "CreatePoints": [
                        "Add Get Landscape Data node in PCG Graph Editor.",
                        "Add Surface Sampler node, connect to Get Landscape Data.",
                        "Enable Debug Rendering on Surface Sampler.",
                        "Select PCG Volume and click Generate button in Details panel."
                    ]
                },
                {
                    "AddVariation": [
                        "Adjust Points Per Square Meter to 0.15.",
                        "Set Points Extents X, Y, Z values to 50.",
                        "Add Transform Points node, connect to Surface Sampler.",
                        "Disable Debug Rendering on Surface Sampler, enable on Transform Points.",
                        "Set Max Rotation Z value to 360.",
                        "Disable Absolute Rotation.",
                        "Set Scale Min X, Y, Z values to 0.5, Scale Max X, Y, Z values to 1.2."
                    ]
                },
                {
                    "SpawnStaticMeshes": [
                        "Add Static Mesh Spawner node, connect to Transform Points.",
                        "Add Static Mesh in Mesh Entries option (e.g., SM_EuropeanHornbeam_Forest_01).",
                        "Add additional Static Meshes and adjust Weight property for variety."
                    ]
                }
            ]
        },
        "Tags": [
            "landscape",
            "building virtual worlds",
            "procedural generation"
        ],
        "Community": {
            "DeveloperForums": "Ask questions and help your peers on Developer Forums.",
            "LearningLibrary": "Write your own tutorials or read those from others in the Learning Library."
        }
    }
}
{
    "PCGDevelopmentGuides": {
        "Description": "The Procedural Content Generation Framework (PCG) is a toolset for creating procedural content in Unreal Engine. It is built for extensibility and interactivity, providing easy integration into existing world building pipelines and blending procedural and traditional workflows.",
        "Sections": [
            {
                "UsingPCGGenerationModes": {
                    "Title": "Using PCG Generation Modes",
                    "Description": "A guide to using PCG Partitioning, Hierarchical Generation, and Runtime Generation in your levels."
                },
                {
                    "PCGDataTypesReference": {
                        "Title": "Procedural Content Generation Framework Data Types Reference",
                        "Description": "A reference for the PCG data types used with the Procedural Content Generation Framework."
                    },
                    {
                        "PCGNodeReference": {
                            "Title": "Procedural Content Generation Framework Node Reference",
                            "Description": "A reference for the PCG Graph nodes used with the Procedural Content Generation Framework."
                        }
                    }
                ],
                "Tags": [
                    "landscape",
                    "building virtual worlds",
                    "procedural generation"
                ],
                "Community": {
                    "DeveloperForums": "Ask questions and help your peers on Developer Forums.",
                    "LearningLibrary": "Write your own tutorials or read those from others in the Learning Library."
                }
            }
        }
        {
            "UsingPCGGenerationModes": {
                "Description": "A guide to using PCG Partitioning, Hierarchical Generation, and Runtime Generation in your levels with the Procedural Content Generation Framework (PCG) in Unreal Engine.",
                "GenerationModes": [
                    {
                        "Type": "Non-partitioned Generation",
                        "Description": "Default mode where all meshes are contained within the component’s domain, suitable for smaller PCG assets."
                    },
                    {
                        "Type": "Partitioned Generation",
                        "Description": "Generates meshes across a user-defined grid, splitting data between cells for easier streaming and better performance."
                    },
                    {
                        "Type": "Hierarchical Generation",
                        "Description": "Overrides the Partition Grid Size using the Grid Size node for multi-scale mesh generation, providing fine-tuned control."
                    },
                    {
                        "Type": "Runtime Generation",
                        "Description": "Generates and cleans up dynamically in proximity to PCG Generation Sources, effective for hierarchical generation and runtime performance."
                    }
                ],
                "PartitionedGeneration": {
                    "Steps": [
                        {
                            "EnablePartitioning": [
                                "Select the PCG asset in your level.",
                                "Click the checkbox next to Is Partitioned in the Details panel."
                            ]
                        },
                        {
                            "ConfigurePartitionGridSize": [
                                "Select the PCGWorldActor in the Outliner.",
                                "Adjust the Partition Grid Size option.",
                                "Select each PCG asset and click Cleanup in the Details panel.",
                                "Click the Generate button to regenerate the result."
                            ]
                        }
                    ],
                    "ExampleImage": "An example of a partitioned PCG component."
                },
                "HierarchicalGeneration": {
                    "Steps": [
                        {
                            "EnableHierarchicalGeneration": [
                                "Open your PCG graph and click the Graph Settings.",
                                "Click the checkbox next to Use Hierarchical Generation.",
                                "Select a value for HiGen Default Grid Size.",
                                "Save your PCG graph."
                            ]
                        },
                        {
                            "ConfigureGridSizeSettings": [
                                "Add the Grid Size node before sampler nodes in your PCG graph.",
                                "Adjust the HiGen Grid Size setting in the Grid Size node.",
                                "Save the graph and regenerate your result in the level."
                            ]
                        }
                    ],
                    "Guidelines": [
                        "Nodes not following a Grid Size node use the HiGen Default Grid Size value.",
                        "Data from larger grids cascades down to smaller grids but not vice versa.",
                        "Output from multiple grid sizes uses the smallest grid size."
                    ],
                    "ExampleImage": "Highlighted rocks generated on a smaller grid size."
                },
                "UnboundedGridSize": {
                    "Description": "Use the Unbounded grid size to execute nodes once without grid restrictions, then apply grid restrictions using the Grid Size node to avoid performance issues.",
                    "ExampleImage": "Unbound grid size example with Mesh Sampler node."
                },
                "RuntimeGeneration": {
                    "Description": "Special generation mode for dynamic generation and cleanup around PCG Generation Sources in editor, PIE, and standalone builds.",
                    "Steps": [
                        {
                            "EnableRuntimeGeneration": [
                                "In the PCG asset's Details panel, change the Generation Trigger to Generate at Runtime."
                            ]
                        },
                        {
                            "TestRuntimeGeneration": [
                                "Select the PCGWorldActor in the Outliner.",
                                "Ensure Treat Editor Viewport as Generation Source is enabled."
                            ]
                        }
                    ],
                    "ConfigureRuntimeGeneration": [
                        {
                            "Description": "Define generation radii in the PCG Graph settings or PCGComponent Details panel.",
                            "Steps": [
                                "Open the PCG Graph Settings and expand Runtime Generation > Generation Radii.",
                                "Adjust the generation radius for each grid size.",
                                "Adjust the Cleanup Radius Multiplier.",
                                "Save the graph."
                            ]
                        }
                    ],
                    "GenerationSources": [
                        "Editor Viewport sources",
                        "Player sources",
                        "World Partition streaming sources",
                        "PCG Generation Source Components"
                    ],
                    "SchedulingPolicies": "Set in the PCG component Details panel to prioritize generating components based on distance and view direction.",
                    "ExampleImage": "Meshes generated around the camera view in the viewport."
                },
                "DebuggingAndRuntimeOverrides": {
                    "Description": "Console commands for debugging Runtime Generation.",
                    "Commands": [
                        {
                            "pcg.RuntimeGeneration.Enable": "Toggles Runtime Generation."
                        },
                        {
                            "pcg.RuntimeGeneration.EnableDebugging": "Toggles verbose logging for the Runtime Generation Scheduler."
                        },
                        {
                            "pcg.RuntimeGeneration.EnablePooling": "Toggles pooling for runtime generated Partition Actors (enabled by default)."
                        },
                        {
                            "pcg.RuntimeGeneration.BasePoolSize": "Sets the initial number of runtime generated Partition Actors in the pool (default 100)."
                        },
                        {
                            "pcg.RuntimeGeneration.FramesBetweenGraphSchedules": "Sets the number of ticks between scheduling components (default 0)."
                        },
                        {
                            "pcg.FrameTime": "Allocates time for PCG to execute per frame (default 16.667 ms)."
                        },
                        {
                            "pcg.EditorFrameTime": "Allocates time for PCG to execute per frame in editor (default 50 ms)."
                        }
                    ]
                },
                "VisualizingGridSizeInPCGGraph": {
                    "Description": "Use the Debug Object Tree to visualize grid sizes used by nodes in the PCG graph.",
                    "Steps": [
                        "Select a local PCG component from the Debug Object Tree.",
                        "Click the arrow next to the component name and select the component."
                    ],
                    "ExampleImage": "Visualization of the Hierarchical Generation grid size."
                },
                "Tags": [
                    "building virtual worlds",
                    "procedural generation",
                    "hierarchical generation"
                ],
                "Community": {
                    "DeveloperForums": "Ask questions and help your peers on Developer Forums.",
                    "LearningLibrary": "Write your own tutorials or read those from others in the Learning Library."
                }
            }
        }
        {
            "PCGDataTypesReference": {
                "Description": "A reference for the PCG data types used with the Procedural Content Generation Framework in Unreal Engine.",
                "DataTypes": [
                    {
                        "Type": "Spatial Data",
                        "Description": "Contains references to 2D or 3D space representing volumes, heightfields, splines, and point data.",
                        "Subtypes": [
                            {
                                "Subtype": "Volumes",
                                "Description": "3D shapes used for boolean set operations or sampling directly from the level using the Volume Sampler node."
                            },
                            {
                                "Subtype": "Surfaces",
                                "Description": "2D data such as Landscapes mapped to the XY plane, used by the Surface Sampler node to generate points on a 2D plane and project onto a 3D shape."
                            },
                            {
                                "Subtype": "Lines",
                                "Description": "Represents Spline and Landscape Spline components, reading the spline's key points with tangents and point scales. Referenced using Get Spline Data and Spline Sampler nodes."
                            },
                            {
                                "Subtype": "Points",
                                "Description": "Collection of points representing surfaces or volumes in 3D space with associated bounds. Each point has a Density value (0 to 1), Transform information, Color, Steepness, and Seed for randomness control."
                            }
                        ]
                    },
                    {
                        "Type": "Composite Data",
                        "Description": "Result of set operations (union, intersection, set difference). Can be chained together and converted back to explicit data."
                    },
                    {
                        "Type": "Attribute Sets",
                        "Description": "User-defined variables stored as Metadata in the PCG graph. Manipulated using attribute operation nodes and consumed by nodes.",
                        "UsageExample": "Drive node settings by connecting an attribute to the exposed pins of advanced node settings."
                    }
                ],
                "SpatialDataPointsInformation": {
                    "Data": [
                        {
                            "Name": "Transform",
                            "Description": "Translation, Rotation, and Scale information."
                        },
                        {
                            "Name": "BoundsMin and BoundsMax",
                            "Description": "Minimum and maximum extents of the volume represented by the point."
                        },
                        {
                            "Name": "Color",
                            "Description": "Four channel color value per point."
                        },
                        {
                            "Name": "Density",
                            "Description": "Floating point representation of a point's falloff in relation to other points, determining sampling density."
                        },
                        {
                            "Name": "Steepness",
                            "Description": "Softness of the volume represented by a point, controlling the shape of its influence."
                        },
                        {
                            "Name": "Seed",
                            "Description": "Used by random number generators to control randomness, computed from position for world-position consistency."
                        }
                    ]
                },
                "AttributesListWindow": {
                    "Description": "Attributes can be inspected in the Attributes List window, part of the PCG Node Graph interface."
                },
                "Tags": [
                    "landscape",
                    "building virtual worlds",
                    "procedural generation"
                ],
                "Community": {
                    "DeveloperForums": "Ask questions and help your peers on Developer Forums.",
                    "LearningLibrary": "Write your own tutorials or read those from others in the Learning Library."
                }
            }
        }
        {
            "ProceduralContentGenerationFrameworkNodeReference": {
                "Description": "A reference for the PCG Graph nodes used with the Procedural Content Generation Framework.",
                "Details": {
                    "Introduction": "The Procedural Content Generation (PCG) Framework utilizes the Procedural Node Graph to generate procedural content both in the Editor and at Runtime. Spatial data flows into the graph from a PCG Component in your Level and is used to generate points. Points are filtered and modified through various nodes.",
                    "NodeCategories": {
                        "Blueprint": [
                            {
                                "Node": "Execute Blueprint",
                                "Description": "Executes a specified custom Blueprint Class with the Execute or Execute With Context method on a clean instance of a Blueprint Class deriving from UPCGBlueprintElement."
                            }
                        ],
                        "ControlFlow": [
                            {
                                "Node": "Branch",
                                "Description": "Selects one of two outputs based on a Boolean attribute, controlling execution flow based on specific circumstances."
                            },
                            {
                                "Node": "Select",
                                "Description": "Selects one of two inputs to be forwarded to a single output based on a Boolean attribute."
                            },
                            {
                                "Node": "Select (Multi)",
                                "Description": "Multi-input version of the Select node, useful for picking different data based on integer, enum, or string-based input."
                            },
                            {
                                "Node": "Switch",
                                "Description": "Multi-output version of the Branch node, useful for picking different data based on integer, string, or enum."
                            }
                        ],
                        "Debug": [
                            {
                                "Node": "Debug",
                                "Description": "Debugs the previous node in the graph, useful for permanent debug points."
                            },
                            {
                                "Node": "Sanity Check Point Data",
                                "Description": "Validates input data points are within a given range, logging an error and canceling generation if outside the range."
                            },
                            {
                                "Node": "Print String",
                                "Description": "Prints a prefixed message to log, node, and screen, useful for debugging and validating assumptions in a graph."
                            }
                        ],
                        "Density": [
                            {
                                "Node": "Curve Remap Density",
                                "Description": "Remaps the density of each point to another value according to a provided curve."
                            },
                            {
                                "Node": "Density Remap",
                                "Description": "Applies a linear transform to the point densities."
                            },
                            {
                                "Node": "Distance to Density",
                                "Description": "Sets point density according to the distance from a reference point."
                            }
                        ],
                        "Filter": [
                            {
                                "Node": "Attribute Filter",
                                "Description": "General purpose filtering on attributes and properties."
                            },
                            {
                                "Node": "Attribute Filter Range",
                                "Description": "Range-based version of the Attribute Filter."
                            },
                            {
                                "Node": "Density Filter",
                                "Description": "Filters points based on density and provided filter ranges."
                            },
                            {
                                "Node": "Discard Points on Irregular Surface",
                                "Description": "Tests multiple points around source points to determine if they are on the same plane."
                            }
                        ],
                        "Generic": [
                            {
                                "Node": "Add Tags",
                                "Description": "Adds tags on the provided data based on comma-separated lists of tags."
                            },
                            {
                                "Node": "Apply On Actor",
                                "Description": "Sets properties on an actor, driven by properties provided in an Attribute Set."
                            },
                            {
                                "Node": "Delete Tags",
                                "Description": "Removes tags from the input data."
                            },
                            {
                                "Node": "Gather",
                                "Description": "Takes all inputs and generates a single collection holding all the input data."
                            }
                        ],
                        "Helpers": [
                            {
                                "Node": "Spatial Data Bounds To Point",
                                "Description": "Computes the bounds and returns a single point representing the bounds of spatial data."
                            }
                        ],
                        "Hierarchical Generation": [
                            {
                                "Node": "Grid Size",
                                "Description": "Specifies grid size to execute downstream nodes."
                            }
                        ],
                        "Input Output": [
                            {
                                "Node": "Data Table Row to Attribute Set",
                                "Description": "Extracts a single row from a data table to an Attribute Set."
                            },
                            {
                                "Node": "Load Alembic File",
                                "Description": "Loads an Alembic file into PCG point data."
                            },
                            {
                                "Node": "Load Data Table",
                                "Description": "Loads a UDataTable into PCG point data."
                            },
                            {
                                "Node": "Load PCG Data Asset",
                                "Description": "Loads a PCG Data Asset object and passes its data downstream."
                            }
                        ],
                        "Metadata": [
                            {
                                "Node": "Add Attribute",
                                "Description": "Adds an attribute to point data or an attribute set."
                            },
                            {
                                "Node": "Attribute Noise",
                                "Description": "Computes new values for a target attribute for each point in a set of point data."
                            },
                            {
                                "Node": "Attribute Partition",
                                "Description": "Splits input data in a partition according to selected attributes."
                            },
                            {
                                "Node": "Attribute Rename",
                                "Description": "Renames an existing attribute."
                            }
                        ],
                        "Point Ops": [
                            {
                                "Node": "Apply Scale to Bounds",
                                "Description": "Multiplies bounds min and max by their scale and resets the scale to 1."
                            },
                            {
                                "Node": "Bounds Modifier",
                                "Description": "Modifies the bounds property on points in the provided point data."
                            },
                            {
                                "Node": "Build Rotation From Up Vector",
                                "Description": "Builds rotation from up vector."
                            },
                            {
                                "Node": "Combine Points",
                                "Description": "Outputs a new Point Data containing a single point that encompasses all points in its respective Point Data."
                            }
                        ],
                        "Sampler": [
                            {
                                "Node": "Copy Points",
                                "Description": "Copies an instance of all points in the Source per point in the Target input."
                            },
                            {
                                "Node": "Mesh Sampler",
                                "Description": "Samples points on a specified static mesh."
                            },
                            {
                                "Node": "Texture Sampler",
                                "Description": "Samples the UV of a texture at each point."
                            },
                            {
                                "Node": "Select Points",
                                "Description": "Selects a subset of points from the input Point Data using a probability."
                            }
                        ],
                        "Spatial": [
                            {
                                "Node": "Attribute Set To Point",
                                "Description": "Converts an Attribute Set to Data Point by creating one default point per entry."
                            },
                            {
                                "Node": "Create Points",
                                "Description": "Creates point data from a static description of points."
                            },
                            {
                                "Node": "Create Points Grid",
                                "Description": "Creates a simple grid of points defined by settings."
                            },
                            {
                                "Node": "Create Spline",
                                "Description": "Creates a Spline from input point data."
                            }
                        ],
                        "Uncategorized": [
                            {
                                "Node": "Add Comment",
                                "Description": "Visual aid to categorize and organize a graph."
                            },
                            {
                                "Node": "Add Reroute Node",
                                "Description": "Graph organizational tool to add control points on edges."
                            },
                            {
                                "Node": "Add Named Reroute Declaration Node",
                                "Description": "Named reroute nodes remove long edges or spaghetti edges across large graphs."
                            }
                        ]
                    }
                }
            }
        }
        {
            "PCG_Biome_Core_Overview": {
                "description": "Learn to use the PCG framework with the PCG Biome Core and Sample Plugins.",
                "sections": {
                    "Introduction": {
                        "content": "The PCG Biome Core and Sample Plugins offer examples of using the PCG Framework with various features. Contains definitions, tool features, to dos, and known issues.",
                        "link": "See Procedural Content Generation Framework for more information."
                    },
                    "PCG_Biome_Core": {
                        "definition": "A data-driven biome creation tool using native PCG Framework nodes and graphs. Provides a fixed pipeline with customizable steps.",
                        "usage": "Can be copied, modified, or extended for production needs with minimal programming support.",
                        "status": "Labeled as experimental and evolving with future updates. Recommended to copy the plugin for production use.",
                        "contents": "Standalone, containing necessary base data assets, structures, blueprint classes, and PCG graphs.",
                        "plugin_info": "See Working with Plugins for more information on enabling plugins."
                    },
                    "PCG_Biome_Sample": {
                        "definition": "A content example showcasing the PCG Biome Core tool with a pre-configured BiomeCore, multiple Biomes, and different inputs.",
                        "usage": "Enabled in any project using Plugin settings, depends on Biome Core plugin.",
                        "purpose": "Serves as a guide and reference for setting up the Biome Core."
                    },
                    "Feature_List": {
                        "features": [
                            "Data-driven, modifiable for production needs.",
                            "Uses only PCG native nodes, no custom code or Blueprint elements.",
                            "Fixed pipeline with customizable steps using PCG Graphs and Data Assets.",
                            "Supports unlimited user-defined biomes.",
                            "Ready-to-use Classes, Structures, Data Assets, Graphs.",
                            "AttributeSet table with dynamically gathered biome asset properties.",
                            "Biome Cache for abstracting biome inputs in 3D space.",
                            "Spatially defined biomes from volumes, splines, or textures.",
                            "Biome priority sorting and global blending.",
                            "Supports manual or semi-manual interactions.",
                            "Spawning of Meshes, PCG Data Assets/Assemblies, and Actors.",
                            "Points bounds from meshes with custom bounds scaling support.",
                            "Layering of generated points managed by generator priority and bounds.",
                            "Support for multiple Generator subtypes.",
                            "Global Root and Children point filtering with customizable compute or texture projection filter graphs.",
                            "Recursive hierarchical transform and spawning with multiple children per recursion level.",
                            "Controls for recursion max depth and ratio.",
                            "Static Mesh property overrides per asset entry.",
                            "Transform offsets and scale per asset entry.",
                            "Runtime Hierarchical Generation details for landscape and mesh spawning."
                        ]
                    },
                    "To_Do": {
                        "tasks": [
                            "Per-Biome blending range: allow specific blending range per biome instead of global.",
                            "Assembly hierarchy and tags support: add advanced control over assemblies' inner hierarchy and tags.",
                            "Landscape patches workflow: prevent feedback loops between landscape refreshes and PCG updates."
                        ]
                    },
                    "Known_Issues": {
                        "issues": [
                            "Child assets not respecting exclusions and biome bounds.",
                            "Child assets overlapping with root and child assets from different hierarchy branches.",
                            "Priority differences leading to premature point removal."
                        ]
                    },
                    "keywords": [
                        "landscape",
                        "experimental",
                        "building virtual worlds",
                        "procedural generation"
                    ],
                    "community": {
                        "forum": "Ask questions and help peers in Developer Forums.",
                        "learning_library": "Write tutorials or read from others in Learning Library."
                    }
                }
            }
        }
        {
            "PCG_Biome_Quick_Start": {
                "description": "Learn to use the PCG framework with the PCG Biome Core and Sample Plugins.",
                "sections": {
                    "Introduction": {
                        "content": "Examples of using the PCG Framework with features like Attribute Set Tables, Feedback loops, Recursive Sub-graphs, and Runtime Hierarchical Generation.",
                        "warning": "Experimental feature; use caution when shipping."
                    },
                    "Base_Requirements": {
                        "description": "Covers base requirements and steps to get the PCG Biome Core working.",
                        "enabling_plugins": {
                            "content": "PCG Biome Core and Sample are distinct plugins. PCG Biome Core requires PCG Framework and PCG Geometry Script Interop plugins.",
                            "steps": [
                                "Open Plugins settings.",
                                "Enable PCG Biome Core for the tool.",
                                "Enable PCG Biome Sample for both tool and content example."
                            ],
                            "link": "See Working with Plugins for more information."
                        },
                        "resources": {
                            "content_browser_settings": "Enable Show Engine Content and Show Plugin Content in the Content Browser.",
                            "content_browser_paths": [
                                "/All/EngineData/Plugins/PCGBiomeCore",
                                "/All/EngineData/Plugins/PCGBiomeSample"
                            ],
                            "disk_paths": [
                                "..\\Engine\\Plugins\\Experimental\\PCGBiomeCore\\",
                                "..\\Engine\\Plugins\\Experimental\\PCGBiomeSample\\"
                            ]
                        }
                    },
                    "PCG_Biome_Core_Content": {
                        "blueprints": {
                            "location": "/All/EngineData/Plugins/PCGBiomeCore/Blueprints",
                            "main_blueprint": "BP_PCGBiomeCore pre-configured with a PCG Component and Box Collision component as its Volume."
                        },
                        "biome_core_graph": {
                            "description": "Main graph to execute all logic for the Biome Core.",
                            "location": "/PCGBiomeCore/BiomeCore.BiomeCore",
                            "subgraphs": "Stored under the 'Core' folder."
                        },
                        "data_assets": {
                            "types": [
                                "BiomeDefinitions",
                                "BiomeAssets",
                                "BiomeGenerators"
                            ],
                            "location": "../Setup sub-folders."
                        }
                    },
                    "PCG_Biome_Sample_Content": {
                        "location": "/All/EngineData/Plugins/PCGBiomeSample/Maps",
                        "description": "Pre-configured BP_PCGBiomeCore, Biome Setup, Volume and Spline actors.",
                        "extra_data": [
                            "BiomeMap texture",
                            "Tiled Flow and SunExposure texture2Darray",
                            "Example PCG assemblies, meshes, and filter graph instances."
                        ],
                        "folders": "../Setup sub-folders."
                    },
                    "World_Setup": {
                        "steps": [
                            "Create or open a level.",
                            "Add a new Landscape or use an existing one.",
                            "Add BP_PCGBiomeCore actor to the level.",
                            "Adjust Volume component scale.",
                            "Select 'BiomeCore' PCG component and click Generate.",
                            "Add DefaultBiomeVolume/Spline actor within the BP_BiomeCore volume.",
                            "Enable Biome Cache debug display."
                        ],
                        "expected_results": [
                            "Debug cubes meshes spawned within the DefaultBiomeVolume/Spline and BiomeCore volume.",
                            "Cache voxels displayed correctly with appropriate colors."
                        ]
                    },
                    "Biomes_Generators_Assets_Setup": {
                        "steps": [
                            "Add BP_PCGBiomeVolume or BP_PCGBiomeSpline actor within the Biome Core volume.",
                            "Create Data Assets for Biome Definitions, Generators, and Assets.",
                            "Set properties for each Data Asset.",
                            "Assign Biome Definition and Asset to BP_PCGBiomeVolume."
                        ],
                        "expected_results": "Automatic refresh and new biome spawned within BP_PCGBiomeVolume and Biome Core Volume."
                    },
                    "Keywords": [
                        "landscape",
                        "experimental",
                        "building virtual worlds",
                        "procedural generation"
                    ],
                    "Community": {
                        "forum": "Ask questions and help peers in Developer Forums.",
                        "learning_library": "Write tutorials or read from others in Learning Library."
                    }
                }
            }
        }
        {
            "PCG_Biome_Reference": {
                "Overview": {
                    "Description": "Learn how to use the PCG framework with PCG Biome Core and Sample Plugins. This is an experimental feature.",
                    "Key_Components": [
                        "Attribute Set Tables",
                        "Feedback Loops",
                        "Recursive Sub-graphs",
                        "Runtime Hierarchical Generation"
                    ]
                },
                "Glossary": {
                    "Terms": {
                        "Biome_Core": "Data-driven biome creation tool with a fixed pipeline.",
                        "Biome_Sample": "Contains a level, data assets, and custom PCG graphs for biome generation.",
                        "Biome_Actors": "Blueprint actors to set up biomes including volumes and setups.",
                        "Biome": "Volume defined by a Biome Definition and assets.",
                        "Generator": "Data asset holding type, priority, and generator graph properties.",
                        "Generator_Graph": "PCG Graph producing root points for asset placement.",
                        "Biome_Assets": "Data asset containing properties to be spawned by Biome Core.",
                        "Biome_Cache": "3D Point Grid Structure for storing biomes.",
                        "Filters": "List of filter graphs for processing points.",
                        "Filter_Graph": "PCG Graph for filtering points.",
                        "Transform_Graph": "PCG Graph for altering points from a generator.",
                        "Injected_Data": "External data injected to modify points in the pipeline.",
                        "Partitioning": "Subdividing volume for faster updates.",
                        "Hierarchical_Generation": "Subdivides volume into multiple grids for processing.",
                        "Runtime_Hierarchical_Generation": "Generates runtime grid cells based on streaming source.",
                        "Biome_Core_Runtime": "Separate PCG Component and Graph for runtime generation.",
                        "Runtime_Assets": "Data asset containing properties for runtime spawning.",
                        "Assembly": "PCG Data Asset created from static meshes.",
                        "Assets_Options": "Sub-categories of asset properties.",
                        "Global_Parameters": "Parameters impacting the Biome Core's global behavior.",
                        "Root_Points": "Points provided by generators.",
                        "Child_Points": "Points created from recursive transform steps."
                    }
                },
                "Core_Graph_Overview": {
                    "Description": "Main processing steps of the BiomeCore graph.",
                    "Steps": [
                        "Compute Biome Cache from actors and texture projections.",
                        "Process generator graphs referenced by Biome Assets.",
                        "Apply biomes to root points and build Root Asset Table.",
                        "Perform priority-based difference between generator data sets.",
                        "Apply filters using global parameters.",
                        "Apply recursive transforms for child assets.",
                        "Spawn static meshes and actors.",
                        "Output data to Biome Core Runtime if enabled."
                    ]
                },
                "High_Level_Concepts": {
                    "Biome_Cache": {
                        "Description": "Grid of PCG points storing biome data spatially.",
                        "Details": [
                            "Supports verticality and 2D structures.",
                            "Controlled by Biome Cache Cell Size.",
                            "Initialized from Biome Core actor bounds."
                        ]
                    },
                    "Root_Asset_Table": {
                        "Description": "Top level asset properties assigned to generated points.",
                        "Details": [
                            "Stores properties in a PCG Attribute Set table.",
                            "Simplifies point attribute layout by using AssetID."
                        ]
                    },
                    "Generators": {
                        "Description": "Root points providers mandatory for the system.",
                        "Details": [
                            "Provide Generator Type, Graphs, and Priority.",
                            "Custom logic in PCG graphs to produce points.",
                            "Priority used for layering points."
                        ]
                    },
                    "Biome_and_Asset_Mapping": {
                        "Description": "Mapping between biome definitions and assets during execution.",
                        "Examples": [
                            "Single Biome Volume with unique definition and assets.",
                            "Multiple volumes/splines with same definition and asset list.",
                            "Global configuration using Biome Setup actor."
                        ]
                    },
                    "Priority_Based_Difference": {
                        "Description": "Layering root points using generator priority.",
                        "Details": [
                            "Binary difference applied in feedback loop.",
                            "Points removed or kept based on priority."
                        ]
                    },
                    "Filtering": {
                        "Description": "Customizable filters for root and child points.",
                        "Details": [
                            "Default filters include Height, Density, and Water Distance.",
                            "Dynamic subgraphs for flexible filtering."
                        ]
                    },
                    "Recursion_and_Transform": {
                        "Description": "Hierarchy of assets with transform graphs.",
                        "Details": [
                            "Transform graphs alter input points for asset placement.",
                            "Recursive subgraph feature for child assets."
                        ]
                    },
                    "Spawning": {
                        "Description": "Final step for spawning actors and meshes.",
                        "Methods": [
                            "Actor spawning using SoftClassPath attribute.",
                            "Static Mesh spawning with SoftObjectPath attribute.",
                            "Assembly instancer for pre-generated point clouds."
                        ]
                    },
                    "Output_to_Biome_Core_Runtime": {
                        "Description": "Optional step for runtime data serialization.",
                        "Details": [
                            "Data passed through Output node for serialization.",
                            "Accessible by other graphs using Get PCG Component Data node."
                        ]
                    }
                },
                "Advanced_Setup": {
                    "Biome_Core_Graph_Parameters": {
                        "Parameters": [
                            {
                                "Name": "Biome Blending Range",
                                "Description": "Applies jittering to generated points."
                            },
                            {
                                "Name": "Debug Display Biome Cache",
                                "Description": "Visual representation of the Biome Cache."
                            },
                            {
                                "Name": "Cache Cell Size",
                                "Description": "Configures the cache resolution."
                            },
                            {
                                "Name": "Max Child Asset Depth",
                                "Description": "Controls recursion level for child assets."
                            },
                            {
                                "Name": "Child Input Points Rate Multiplier",
                                "Description": "Limits points emitting child assets."
                            },
                            {
                                "Name": "Output Data for Runtime Generation",
                                "Description": "Enables serialization for runtime use."
                            },
                            {
                                "Name": "Bypass Global Filters",
                                "Description": "Skips global point filtering."
                            },
                            {
                                "Name": "Biome Texture Projection",
                                "Description": "Uses texture for biome layout."
                            }
                        ]
                    },
                    "Generator_SubTypes": {
                        "Description": "Optional multiple point data outputs from generators.",
                        "Use_Cases": [
                            "Separate points based on landscape layer weights.",
                            "Transform points for specific actor spawning.",
                            "Create subtypes for complex biome interaction."
                        ]
                    },
                    "Partitioning_and_Hierarchical_Generation": {
                        "Description": "Partitioning for faster updates.",
                        "Settings": [
                            {
                                "Name": "Is Partitioned",
                                "Description": "Enable generation partitioning."
                            },
                            {
                                "Name": "Use Hierarchical Generation",
                                "Description": "Advanced generation with multiple grid levels."
                            }
                        ]
                    },
                    "Biome_Core_Runtime": {
                        "Description": "Separate PCG Component for runtime asset generation.",
                        "Features": [
                            "Spawning points through runtime sampling.",
                            "Supports hierarchical generation.",
                            "Uses precomputed data from BiomeCore."
                        ]
                    },
                    "Injected_Data": {
                        "Types": [
                            "Exclusions: Removes overlapping points for manual placement.",
                            "Typed: Manually placed points before applying biomes.",
                            "Specific: Points with specific assets before transforms.",
                            "Custom: Stand-alone logic for final pipeline stages."
                        ]
                    }
                },
                "Inputs": {
                    "Biome_Actors_and_Setup": {
                        "Description": "Blueprint classes for setting up biomes.",
                        "Components": [
                            {
                                "Name": "Biome Volume and Spline",
                                "Description": "Easy setup actors for biomes."
                            },
                            {
                                "Name": "Biome Setup",
                                "Description": "Global definition for biomes."
                            }
                        ]
                    },
                    "Biome_Definition": {
                        "Description": "PrimaryDataAsset classes for biomes.",
                        "Properties": [
                            "BiomeName",
                            "BiomeColor",
                            "BiomePriority"
                        ]
                    },
                    "Biome_Assets_and_Structures": {
                        "Description": "Templates for asset properties.",
                        "Properties": [
                            "Enabled",
                            "Weight",
                            "Generator",
                            "TransformGraph",
                            "Mesh",
                            "Assembly",
                            "Actor",
                            "ChildAssets"
                        ]
                    },
                    "Generator": {
                        "Description": "Templates for generator properties.",
                        "Properties": [
                            "GeneratorType",
                            "GeneratorPriority",
                            "GeneratorGraph",
                            "GeneratorAllowOverlap"
                        ]
                    },
                    "Transform": {
                        "Description": "Graphs for altering input points.",
                        "Examples": [
                            "BasicSecondaries: Creates points around input and projects them.",
                            "DuplicatePattern: Rotates and scales duplicated points."
                        ]
                    },
                    "Filters": {
                        "Description": "Customizable list for filtering points.",
                        "Default_Filters": [
                            "Height",
                            "Density",
                            "WaterDistance"
                        ]
                    }
                }
            }
        }